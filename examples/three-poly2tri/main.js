// Generated by LiveScript 1.2.0
(function(){
  var slice$ = [].slice;
  $(function(){
    return $.get('../../orig-chars.json', function(OrigChars){
      var shiftFloat, shapeFromOutline, scale, dim, cols, boxes, scene, box, camera, updateCamera, light, renderer, render, load, i, ch, x, y, obj, results$ = [];
      shiftFloat = function(){
        return parseFloat(this.shift());
      };
      shapeFromOutline = function(it){
        var shape, path, current, tokens;
        shape = new THREE.Shape;
        path = new THREE.Path;
        current = shape;
        tokens = it.split(' ');
        tokens.shiftFloat = shiftFloat;
        while (tokens.length) {
          switch (tokens.shift()) {
          case 'M':
            current.moveTo(tokens.shiftFloat(), tokens.shiftFloat());
            break;
          case 'L':
            while (tokens.length > 1) {
              current.lineTo(tokens.shiftFloat(), tokens.shiftFloat());
              if (tokens[0] === 'Z') {
                if (current !== shape) {
                  shape.holes.push(path);
                  path = new THREE.Path;
                }
                current = path;
                break;
              }
            }
          }
        }
        return shape;
      };
      scale = 0.1;
      dim = 2150;
      cols = 64;
      boxes = [];
      scene = new THREE.Scene;
      box = new THREE.Box3(new THREE.Vector3(0, -window.innerHeight / scale, -50), new THREE.Vector3(window.innerWidth / scale, 0, 50));
      camera = new THREE.OrthographicCamera(box.min.x, box.max.x, box.max.y, box.min.y, 1, 1000);
      camera.position.set(0, 0, 500);
      updateCamera = function(){
        camera.left = box.min.x;
        camera.right = box.max.x;
        camera.bottom = box.min.y;
        camera.top = box.max.y;
        return camera.updateProjectionMatrix();
      };
      light = new THREE.DirectionalLight(0xffffff);
      light.position.set(0, 0, 1);
      scene.add(light);
      renderer = new THREE.WebGLRenderer({
        antialias: true
      });
      renderer.setSize(window.innerWidth, window.innerHeight);
      $('#container').append(renderer.domElement);
      render = function(){
        var i$, ref$, len$, o;
        for (i$ = 0, len$ = (ref$ = boxes).length; i$ < len$; ++i$) {
          o = ref$[i$];
          if (o.load && box.containsPoint(o.position)) {
            o.load();
          }
        }
        requestAnimationFrame(render);
        return renderer.render(scene, camera);
      };
      requestAnimationFrame(render);
      load = function(){
        var this$ = this;
        this.load = null;
        $.get("./a/" + this.ch + ".json", function(data){
          var j, ref$, outline, color, lineColor, log, geometry, offset, m, mesh, results$ = [];
          for (j in ref$ = data != null ? data.outlines : void 8) {
            outline = ref$[j];
            color = 0xffcc00;
            lineColor = 0xee6600;
            log = console.log;
            console.log = fn$;
            geometry = new THREE.ShapeGeometry(shapeFromOutline(outline));
            console.log = log;
            offset = new THREE.Vector2(+data.centroids[j][0], -data.centroids[j][1]);
            m = new THREE.Matrix4;
            m.makeTranslation(-offset.x, -offset.y, 0);
            geometry.applyMatrix(m);
            mesh = THREE.SceneUtils.createMultiMaterialObject(geometry, [
              new THREE.MeshLambertMaterial({
                color: color
              }), new THREE.MeshBasicMaterial({
                color: lineColor,
                wireframe: true,
                transparent: true
              })
            ]);
            mesh.position.set(offset.x, offset.y, 0);
            results$.push(this$.add(mesh));
          }
          return results$;
          function fn$(){
            var args, i$, len$, str;
            args = slice$.call(arguments);
            for (i$ = 0, len$ = args.length; i$ < len$; ++i$) {
              str = args[i$];
              if (str.match(/triangulate/)) {
                color = 0x330000;
                lineColor = 0xff0000;
                break;
              }
            }
            log.call(console, data.ch, j);
            return log.apply(console, args);
          }
        });
      };
      for (i in OrigChars) {
        ch = OrigChars[i];
        x = ~~(+i % cols);
        y = ~~(+i / cols);
        obj = new THREE.Object3D;
        obj.ch = ch;
        obj.load = load;
        obj.position.set(x * dim, -y * dim, 0);
        boxes.push(obj);
        results$.push(scene.add(obj));
      }
      return results$;
    });
  });
}).call(this);
