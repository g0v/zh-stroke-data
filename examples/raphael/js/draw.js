// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var drawOutline, strokeWord;
    drawOutline = function(paper, outline, pathAttrs) {
      var cmd, path, _i, _len;
      path = [];
      for (_i = 0, _len = outline.length; _i < _len; _i++) {
        cmd = outline[_i];
        switch (cmd.type) {
          case "M":
            path.push(["M", cmd.x, cmd.y]);
            break;
          case "L":
            path.push(["L", cmd.x, cmd.y]);
            break;
          case "C":
            path.push(["C", cmd.begin.x, cmd.begin.y, cmd.mid.x, cmd.mid.y, cmd.end.x, cmd.mid.y]);
            break;
          case "Q":
            path.push(["Q", cmd.begin.x, cmd.begin.y, cmd.end.x, cmd.end.y]);
        }
      }
      return paper.path(path).attr(pathAttrs).transform("s0.2,0.2,0,0");
    };
    strokeWord = function(element, word) {
      var utf8code;
      utf8code = escape(word).replace(/%u/, "").toLowerCase();
      console.log(utf8code);
      return zhStrokeData.loaders.XML("../data/utf8/" + utf8code + ".xml").then(function(strokes) {
        var color, delay, dim, gridLines, line, paper, pathAttrs, stroke, timeoutSeconds, _i, _j, _len, _len1, _results;
        dim = 430;
        paper = Raphael(element, dim, dim);
        gridLines = ["M0,0 L0," + dim, "M" + dim + ",0 L" + dim + "," + dim, "M0,0 L" + dim + ",0", "M0," + dim + ",0 L" + dim + "," + dim, "M" + (Math.round(dim / 3)) + ",0 L" + (Math.round(dim / 3)) + "," + dim, "M" + (Math.round(dim / 3 * 2)) + ",0 L" + (Math.round(dim / 3 * 2)) + "," + dim, "M0," + (Math.round(dim / 3)) + " L" + dim + "," + (Math.round(dim / 3)), "M0," + (Math.round(dim / 3 * 2)) + " L" + dim + "," + (Math.round(dim / 3 * 2))];
        for (_i = 0, _len = gridLines.length; _i < _len; _i++) {
          line = gridLines[_i];
          paper.path(line).attr({
            'stroke-width': 1,
            'stroke': '#a33'
          });
        }
        Raphael.getColor();
        Raphael.getColor();
        color = Raphael.getColor();
        pathAttrs = {
          stroke: color,
          "stroke-width": 5,
          "stroke-linecap": "round",
          "fill": color
        };
        timeoutSeconds = 0;
        delay = 500;
        _results = [];
        for (_j = 0, _len1 = strokes.length; _j < _len1; _j++) {
          stroke = strokes[_j];
          _results.push((function(stroke) {
            return setTimeout((function() {
              return drawOutline(paper, stroke.outline, pathAttrs);
            }), timeoutSeconds += delay);
          })(stroke));
        }
        return _results;
      });
    };
    return window.strokeWords = function(element, words) {
      var a, _i, _len, _ref, _results;
      _ref = words.split(/(?:)/);
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        a = _ref[_i];
        _results.push(strokeWord(element, a));
      }
      return _results;
    };
  });

}).call(this);
