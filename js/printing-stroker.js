// Generated by LiveScript 1.3.1
(function(){
  var PrintingStroker, x$, ref$;
  PrintingStroker = (function(){
    PrintingStroker.displayName = 'PrintingStroker';
    var ref$, prototype = PrintingStroker.prototype, constructor = PrintingStroker;
    PrintingStroker.loaders = {
      xml: (ref$ = zhStrokeData.loaders).XML,
      json: ref$.JSON,
      bin: ref$.Binary,
      txt: ref$.Scanline
    };
    function PrintingStroker(str, options){
      var promises, res$, i$, ref$, len$, ch, this$ = this;
      options = $.extend({
        autoplay: false,
        width: 86,
        height: 86,
        preload: 4,
        poster: '',
        url: './json/',
        dataType: 'json'
      }, options);
      this.autoplay = options.autoplay;
      this.preload = options.preload;
      this.width = options.width;
      this.height = options.height;
      this.poster = options.poster;
      this.url = options.url;
      this.dataType = options.dataType;
      this.domElement = document.createElement('canvas');
      this.domElement.width = this.width;
      this.domElement.height = this.height;
      res$ = [];
      for (i$ = 0, len$ = (ref$ = str.sortSurrogates()).length; i$ < len$; ++i$) {
        ch = ref$[i$];
        res$.push(constructor.loaders[this.dataType](this.url + "" + ch.codePointAt().toString(16) + "." + this.dataType));
      }
      promises = res$;
      Q.all(promises).then(function(it){
        var max, chars, res$, i, charData, strokes, res1$, j, data, stroke, x$, y$, c, lresult$, lresult1$, i$, k, z$, results$ = [];
        max = 0;
        res$ = [];
        for (i in it) {
          charData = it[i];
          res1$ = [];
          for (j in charData) {
            data = charData[j];
            res1$.push(stroke = this$.dataType === 'txt'
              ? (x$ = new zhStrokeData.ScanlineStroke(data), x$.scaleX = this$.width / 2048, x$.scaleY = this$.height / 2048, x$)
              : (y$ = new zhStrokeData.Stroke(data), y$.scaleX = this$.width / 2150, y$.scaleY = this$.height / 2150, y$));
          }
          strokes = res1$;
          if (strokes.length > max) {
            max = strokes.length;
          }
          res$.push(strokes);
        }
        chars = res$;
        this$.domElement.width = this$.width * max;
        this$.domElement.height = this$.height * chars.length;
        for (i in chars) {
          c = chars[i];
          lresult$ = [];
          i = +i;
          for (j in c) {
            lresult1$ = [];
            j = +j;
            for (i$ = 0; i$ <= j; ++i$) {
              k = i$;
              z$ = c[+k];
              z$.time = 1;
              z$.x = this$.width * j;
              z$.y = this$.height * i;
              z$.render(this$.domElement.getContext('2d'));
              lresult1$.push(z$);
            }
            lresult$.push(lresult1$);
          }
          results$.push(lresult$);
        }
        return results$;
      });
    }
    return PrintingStroker;
  }());
  x$ = (ref$ = window.zhStrokeData) != null
    ? ref$
    : window.zhStrokeData = {};
  x$.PrintingStroker = PrintingStroker;
}).call(this);
