// Generated by LiveScript 1.3.0
(function(){
  var AABB, Comp, Empty, Track, Stroke, ScanlineTrack, ScanlineStroke, Arrow, hintDataFromMOE, hintDataFromScanline, halfPi, Hint, ref$, ref1$;
  AABB = (function(){
    AABB.displayName = 'AABB';
    var axises, scan, prototype = AABB.prototype, constructor = AABB;
    axises = ['x', 'y'];
    scan = function(group, axis){
      var points, i$, len$, box, groups, g, d, p;
      switch (false) {
      case !!Array.isArray(group):
        throw new Error('first argument should be an array');
      case group[0].min[axis] !== undefined:
        throw new Error('axis not found');
      default:
        points = [];
        for (i$ = 0, len$ = group.length; i$ < len$; ++i$) {
          box = group[i$];
          if (!box.isEmpty()) {
            points.push({
              box: box,
              value: box.min[axis],
              depth: 1
            });
            points.push({
              value: box.max[axis],
              depth: -1
            });
          }
        }
        points.sort(function(a, b){
          switch (false) {
          case !(a.value < b.value):
            return -1;
          case a.value !== b.value:
            return 0;
          case !(a.value > b.value):
            return 1;
          }
        });
        groups = [];
        g = [];
        d = 0;
        for (i$ = 0, len$ = points.length; i$ < len$; ++i$) {
          p = points[i$];
          d += p.depth;
          if (d !== 0) {
            if (p.box) {
              g.push(p.box);
            }
          } else {
            groups.push(g);
            g = [];
          }
        }
        return groups;
      }
    };
    AABB.rdc = function(g, todo){
      var results, res$, i$, len$, axis, gs, next;
      todo == null && (todo = axises.slice());
      switch (false) {
      case !!Array.isArray(g):
        throw new Error('first argument should be an array');
      default:
        res$ = [];
        for (i$ = 0, len$ = todo.length; i$ < len$; ++i$) {
          axis = todo[i$];
          gs = scan(g, axis);
          if (gs.length > 1) {
            next = axises.slice();
            next.splice(next.indexOf(axis), 1);
            res$.push(Array.prototype.concat.apply([], (fn$.call(this))));
          } else {
            res$.push(gs);
          }
        }
        results = res$;
        return results.reduce(function(c, n){
          if (c.length > n.length) {
            return c;
          } else {
            return n;
          }
        });
      }
      function fn$(){
        var i$, ref$, len$, results$ = [];
        for (i$ = 0, len$ = (ref$ = gs).length; i$ < len$; ++i$) {
          g = ref$[i$];
          results$.push(this.rdc(g, next));
        }
        return results$;
      }
    };
    AABB.collide = function(it){
      var result, i$, to$, i, j$, to1$, j;
      switch (false) {
      case !!Array.isArray(it):
        throw new Error('first argument should be an array');
      default:
        result = [];
        for (i$ = 0, to$ = it.length; i$ < to$; ++i$) {
          i = i$;
          for (j$ = i + 1, to1$ = it.length; j$ < to1$; ++j$) {
            j = j$;
            if (it[i].intersect(it[j])) {
              result.push([it[i], it[j]]);
            }
          }
        }
        return result;
      }
    };
    AABB.hit = function(it){
      var g;
      switch (false) {
      case !!Array.isArray(it):
        throw new Error('first argument should be an array');
      default:
        return Array.prototype.concat.apply([], (function(){
          var i$, ref$, len$, results$ = [];
          for (i$ = 0, len$ = (ref$ = this.rdc(it)).length; i$ < len$; ++i$) {
            g = ref$[i$];
            results$.push(this.collide(g));
          }
          return results$;
        }.call(this)));
      }
    };
    function AABB(min, max){
      this.min = min != null
        ? min
        : {
          x: Infinity,
          y: Infinity
        };
      this.max = max != null
        ? max
        : {
          x: -Infinity,
          y: -Infinity
        };
      if (isNaN(this.min.x)) {
        this.min.x = Infinity;
      }
      if (isNaN(this.min.y)) {
        this.min.y = Infinity;
      }
      if (isNaN(this.max.x)) {
        this.max.x = -Infinity;
      }
      if (isNaN(this.max.y)) {
        this.max.y = -Infinity;
      }
    }
    Object.defineProperty(prototype, 'width', {
      get: function(){
        return this.max.x - this.min.x;
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(prototype, 'height', {
      get: function(){
        return this.max.y - this.min.y;
      },
      configurable: true,
      enumerable: true
    });
    Object.defineProperty(prototype, 'size', {
      get: function(){
        return this.width * this.height;
      },
      configurable: true,
      enumerable: true
    });
    prototype.isEmpty = function(){
      return this.min.x >= this.max.x || this.min.y >= this.max.y;
    };
    prototype.clone = function(){
      return new AABB(this.min, this.max);
    };
    prototype.transform = function(m00, m01, m10, m11, m20, m21){
      var aabb;
      aabb = new AABB({
        x: m00 * this.min.x + m10 * this.min.y + m20,
        y: m01 * this.min.x + m11 * this.min.y + m21
      }, {
        x: m00 * this.max.x + m10 * this.max.y + m20,
        y: m01 * this.max.x + m11 * this.max.y + m21
      });
      return aabb;
    };
    prototype.addPoint = function(pt){
      if (pt.x < this.min.x) {
        this.min.x = pt.x;
      }
      if (pt.y < this.min.y) {
        this.min.y = pt.y;
      }
      if (pt.x > this.max.x) {
        this.max.x = pt.x;
      }
      if (pt.y > this.max.y) {
        this.max.y = pt.y;
      }
    };
    prototype.addBox = function(aabb){
      if (aabb.min.x < this.min.x) {
        this.min.x = aabb.min.x;
      }
      if (aabb.min.y < this.min.y) {
        this.min.y = aabb.min.y;
      }
      if (aabb.max.x > this.max.x) {
        this.max.x = aabb.max.x;
      }
      if (aabb.max.y > this.max.y) {
        this.max.y = aabb.max.y;
      }
    };
    prototype.containPoint = function(pt){
      var ref$;
      return (this.min.x < (ref$ = pt.x) && ref$ < this.max.x) && (this.min.y < (ref$ = pt.y) && ref$ < this.max.y);
    };
    prototype.intersect = function(it){
      return this.min.x <= it.max.x && this.max.x >= it.min.x && this.min.y <= it.max.y && this.max.y >= it.min.y;
    };
    prototype.render = function(ctx, color, width){
      var x$;
      color == null && (color = '#f90');
      width == null && (width = 10);
      if (this.isEmpty()) {
        return;
      }
      x$ = ctx;
      x$.strokeStyle = color;
      x$.lineWidth = width;
      x$.beginPath();
      x$.rect(this.min.x, this.min.y, this.width, this.height);
      x$.stroke();
    };
    return AABB;
  }());
  Comp = (function(){
    Comp.displayName = 'Comp';
    var prototype = Comp.prototype, constructor = Comp;
    function Comp(children){
      var i$, ref$, len$, child;
      this.children = children != null
        ? children
        : [];
      for (i$ = 0, len$ = (ref$ = this.children).length; i$ < len$; ++i$) {
        child = ref$[i$];
        child.parent = this;
      }
      this.computeAABB();
      this.computeLength();
      this.time = 0.0;
      this.x = this.y = 0;
      this.scaleX = this.scaleY = 1.0;
      this.parent = null;
    }
    prototype.computeLength = function(){
      return this.length = this.children.reduce(function(prev, current){
        return prev + current.length;
      }, 0);
    };
    prototype.computeAABB = function(){
      var i$, ref$, len$, c;
      this.aabb = new AABB;
      for (i$ = 0, len$ = (ref$ = this.children).length; i$ < len$; ++i$) {
        c = ref$[i$];
        this.aabb.addBox(c.aabb.transform(c.scaleX, 0, 0, c.scaleY, c.x, c.y));
      }
      return this.aabb;
    };
    prototype.globalAABB = function(){
      var aabb, p;
      aabb = this.aabb;
      p = this;
      while (p) {
        aabb = aabb.transform(p.scaleX, 0, 0, p.scaleY, p.x, p.y);
        p = p.parent;
      }
      return aabb;
    };
    prototype.childrenChanged = function(){
      var len, i$, ref$, len$, child;
      this.computeLength();
      len = 0;
      for (i$ = 0, len$ = (ref$ = this.children).length; i$ < len$; ++i$) {
        child = ref$[i$];
        len += child.time * child.length;
      }
      this.time = len / this.length;
      if ((ref$ = this.parent) != null) {
        ref$.childrenChanged();
      }
    };
    prototype.breakUp = function(strokeNums){
      var comps, this$ = this;
      strokeNums == null && (strokeNums = []);
      comps = [];
      strokeNums.reduce(function(start, len){
        var end;
        end = start + len;
        comps.push(new Comp(this$.children.slice(start, end)));
        return end;
      }, 0);
      return new Comp(comps);
    };
    prototype.hitTest = function(pt){
      var results;
      results = [];
      if (this.aabb.containPoint(pt)) {
        results.push(this);
      }
      return this.children.reduce(function(prev, child){
        return prev.concat(child.hitTest(pt));
      }, results);
    };
    prototype.beforeRender = function(ctx){
      var x$;
      x$ = ctx;
      x$.save();
      x$.transform(this.scaleX, 0, 0, this.scaleY, this.x, this.y);
    };
    prototype.doRender = function(ctx){};
    prototype.afterRender = function(ctx){
      ctx.restore();
    };
    prototype.render = function(ctx, aabb){
      var len, i$, ref$, len$, child;
      aabb == null && (aabb = false);
      this.beforeRender(ctx);
      if (aabb) {
        this.aabb.render(ctx);
      }
      len = this.length * this.time;
      for (i$ = 0, len$ = (ref$ = this.children).length; i$ < len$; ++i$) {
        child = ref$[i$];
        if (len > 0) {
          if (child.length === 0) {
            continue;
          }
          child.time = Math.min(child.length, len) / child.length;
          child.render(ctx, aabb);
          len -= child.length;
        }
      }
      this.doRender(ctx);
      this.afterRender(ctx);
    };
    return Comp;
  }());
  Empty = (function(superclass){
    var prototype = extend$((import$(Empty, superclass).displayName = 'Empty', Empty), superclass).prototype, constructor = Empty;
    function Empty(data){
      this.data = data;
      this.render = bind$(this, 'render', prototype);
      Empty.superclass.call(this);
    }
    prototype.computeLength = function(){
      return this.length = this.data.speed * this.data.delay;
    };
    prototype.computeAABB = function(){
      return this.aabb = new AABB;
    };
    prototype.render = function(){};
    return Empty;
  }(Comp));
  Track = (function(superclass){
    var prototype = extend$((import$(Track, superclass).displayName = 'Track', Track), superclass).prototype, constructor = Track;
    function Track(data, options){
      var ref$;
      this.data = data;
      this.options = options != null
        ? options
        : {};
      (ref$ = this.options).trackWidth || (ref$.trackWidth = 150);
      (ref$ = this.data).size || (ref$.size = this.options.trackWidth);
      Track.superclass.call(this);
    }
    prototype.computeLength = function(){
      return this.length = Math.sqrt(this.data.vector.x * this.data.vector.x + this.data.vector.y * this.data.vector.y);
    };
    prototype.computeAABB = function(){
      return this.aabb = new AABB({
        x: this.data.x,
        y: this.data.y
      }, {
        x: this.data.x + this.data.vector.x,
        y: this.data.y + this.data.vector.y
      });
    };
    prototype.doRender = function(ctx){
      var x$;
      x$ = ctx;
      x$.beginPath();
      x$.strokeStyle = '#000';
      x$.fillStyle = '#000';
      x$.lineWidth = 4 * this.data.size;
      x$.lineCap = 'round';
      x$.moveTo(this.data.x, this.data.y);
      x$.lineTo(this.data.x + this.data.vector.x * this.time, this.data.y + this.data.vector.y * this.time);
      x$.stroke();
    };
    return Track;
  }(Comp));
  Stroke = (function(superclass){
    var prototype = extend$((import$(Stroke, superclass).displayName = 'Stroke', Stroke), superclass).prototype, constructor = Stroke;
    function Stroke(data){
      var children, i$, to$, i, prev, current;
      console.log(data);
      children = [];
      for (i$ = 1, to$ = data.track.length; i$ < to$; ++i$) {
        i = i$;
        prev = data.track[i - 1];
        current = data.track[i];
        children.push(new Track({
          x: prev.x,
          y: prev.y,
          vector: {
            x: current.x - prev.x,
            y: current.y - prev.y
          },
          size: prev.size
        }));
      }
      this.outline = data.outline;
      Stroke.superclass.call(this, children);
    }
    prototype.computeAABB = function(){
      var i$, ref$, len$, path;
      this.aabb = new AABB;
      for (i$ = 0, len$ = (ref$ = this.outline).length; i$ < len$; ++i$) {
        path = ref$[i$];
        if (path.x !== undefined) {
          this.aabb.addPoint(path);
        }
        if (path.end !== undefined) {
          this.aabb.addPoint(path.begin);
          this.aabb.addPoint(path.end);
        }
        if (path.mid !== undefined) {
          this.aabb.addPoint(path.mid);
        }
      }
      return this.aabb;
    };
    prototype.pathOutline = function(ctx){
      var i$, ref$, len$, path;
      for (i$ = 0, len$ = (ref$ = this.outline).length; i$ < len$; ++i$) {
        path = ref$[i$];
        switch (path.type) {
        case 'M':
          ctx.moveTo(path.x, path.y);
          break;
        case 'L':
          ctx.lineTo(path.x, path.y);
          break;
        case 'C':
          ctx.bezierCurveTo(path.begin.x, path.begin.y, path.mid.x, path.mid.y, path.end.x, path.end.y);
          break;
        case 'Q':
          ctx.quadraticCurveTo(path.begin.x, path.begin.y, path.end.x, path.end.y);
        }
      }
    };
    prototype.beforeRender = function(ctx){
      var x$;
      superclass.prototype.beforeRender.call(this, ctx);
      x$ = ctx;
      x$.save();
      x$.beginPath();
      this.pathOutline(ctx);
      ctx.clip();
    };
    prototype.afterRender = function(ctx){
      ctx.restore();
      superclass.prototype.afterRender.call(this, ctx);
    };
    return Stroke;
  }(Comp));
  ScanlineTrack = (function(superclass){
    var prototype = extend$((import$(ScanlineTrack, superclass).displayName = 'ScanlineTrack', ScanlineTrack), superclass).prototype, constructor = ScanlineTrack;
    function ScanlineTrack(data){
      this.data = data;
      ScanlineTrack.superclass.call(this);
      this.scaleX = this.scaleY = 2;
      this.computeAABB();
      this.length *= 2;
    }
    prototype.computeLength = function(){
      return this.length = this.data.lines.length;
    };
    prototype.computeAABB = function(){
      var direction, i$, ref$, len$, ref1$, idx, start, end;
      direction = this.data.direction;
      this.aabb = new AABB;
      for (i$ = 0, len$ = (ref$ = this.data.lines).length; i$ < len$; ++i$) {
        ref1$ = ref$[i$], idx = ref1$.idx, start = ref1$.start, end = ref1$.end;
        if (direction === 0) {
          this.aabb.addBox(new AABB({
            x: start * this.scaleX + this.x,
            y: idx * this.scaleY + this.y
          }, {
            x: end * this.scaleX + this.x,
            y: (idx + 1) * this.scaleY + this.y
          }));
        } else if (direction === 1) {
          this.aabb.addBox(new AABB({
            x: idx * this.scaleX + this.x,
            y: start * this.scaleY + this.y
          }, {
            x: (idx + 1) * this.scaleX + this.x,
            y: end * this.scaleY + this.y
          }));
        }
      }
      return this.aabb;
    };
    prototype.doRender = function(ctx){
      var direction, x$, i$, to$, i, ref$, idx, start, end;
      direction = this.data.direction;
      x$ = ctx;
      x$.beginPath();
      x$.fillStyle = '#000';
      for (i$ = 0, to$ = ~~(this.data.lines.length * this.time); i$ < to$; ++i$) {
        i = i$;
        ref$ = this.data.lines[i], idx = ref$.idx, start = ref$.start, end = ref$.end;
        if (direction === 0) {
          ctx.fillRect(start * this.scaleX + this.x, (idx - 1) * this.scaleY + this.y, (end - start) * this.scaleX, this.scaleY * 2);
        } else if (direction === 1) {
          ctx.fillRect((idx - 1) * this.scaleX + this.x, start * this.scaleY + this.y, this.scaleX * 2, (end - start) * this.scaleY);
        }
      }
    };
    return ScanlineTrack;
  }(Comp));
  ScanlineStroke = (function(superclass){
    var prototype = extend$((import$(ScanlineStroke, superclass).displayName = 'ScanlineStroke', ScanlineStroke), superclass).prototype, constructor = ScanlineStroke;
    function ScanlineStroke(data){
      var children, res$, i$, len$, track;
      res$ = [];
      for (i$ = 0, len$ = data.length; i$ < len$; ++i$) {
        track = data[i$];
        res$.push(new ScanlineTrack(track));
      }
      children = res$;
      ScanlineStroke.superclass.call(this, children);
    }
    return ScanlineStroke;
  }(Comp));
  Arrow = (function(superclass){
    var prototype = extend$((import$(Arrow, superclass).displayName = 'Arrow', Arrow), superclass).prototype, constructor = Arrow;
    function Arrow(stroke, index){
      var max, track, i$, ref$, len$, t, data, angle;
      this.stroke = stroke;
      this.index = index;
      max = stroke.children.reduce(function(c, n){
        if (c.length > n.length) {
          return c;
        } else {
          return n;
        }
      });
      this.track0 = stroke.children[0];
      for (i$ = 0, len$ = (ref$ = stroke.children).length; i$ < len$; ++i$) {
        t = ref$[i$];
        if (t.length > max.length / 2.5) {
          track = t;
          break;
        }
      }
      data = track.data;
      this.offset = {
        x: 0,
        y: 0
      };
      this.vector = {
        x: data.vector.x / track.length,
        y: data.vector.y / track.length
      };
      this.angle = Math.atan2(this.vector.y, this.vector.x);
      angle = Math.PI / 2 > (ref$ = this.angle) && ref$ >= -Math.PI / 2
        ? this.angle - Math.PI / 2
        : this.angle + Math.PI / 2;
      this.up = {
        x: Math.cos(angle),
        y: Math.sin(angle)
      };
      this.dir = 1;
      this.size = 160;
      Arrow.superclass.call(this);
      this.computeOffset(0);
      this.x = stroke.x + this.track0.data.x;
      this.y = stroke.y + this.track0.data.y;
    }
    prototype.computeLength = function(){
      return this.length = this.stroke.length;
    };
    prototype.computeAABB = function(){
      this.aabb = new AABB;
      this.aabb.addPoint({
        x: this.offset.x,
        y: this.offset.y
      });
      this.aabb.addPoint({
        x: this.offset.x + this.size * this.vector.x,
        y: this.offset.y + this.size * this.vector.y
      });
      this.aabb.addPoint({
        x: this.offset.x + this.vector.x * this.size * 0.5 + (this.dir >= 0
          ? 1
          : -1) * this.up.x * this.size * 0.5,
        y: this.offset.y + this.vector.y * this.size * 0.5 + (this.dir >= 0
          ? 1
          : -1) * this.up.y * this.size * 0.5
      });
      return this.aabb;
    };
    prototype.computeOffset = function(it){
      var p, percent, x$;
      it = +it;
      if (it < 0) {
        it = 0;
      } else if (it < 1) {
        this.dir = 1;
      } else {
        this.dir = -~~(it - 1) - 1;
      }
      p = Math.abs(it);
      percent = p - ~~p;
      x$ = this.offset;
      x$.x = this.dir * this.track0.data.size * this.up.x / 2 + percent * this.size * this.vector.x;
      x$.y = this.dir * this.track0.data.size * this.up.y / 2 + percent * this.size * this.vector.y;
      return this.computeAABB();
    };
    prototype.drawArrow = function(ctx, color, width, bold){
      var x$;
      color == null && (color = '#c00');
      width == null && (width = 16);
      bold == null && (bold = false);
      x$ = ctx;
      x$.lineCap = 'round';
      x$.strokeStyle = color;
      x$.lineWidth = width;
      x$.beginPath();
      x$.moveTo(this.offset.x, this.offset.y);
      x$.lineTo(this.offset.x + this.vector.x * this.size * 0.66, this.offset.y + this.vector.y * this.size * 0.66);
      x$.stroke();
      x$.fillStyle = color;
      x$.beginPath();
      x$.moveTo(this.offset.x + this.vector.x * this.size * 0.66, this.offset.y + this.vector.y * this.size * 0.66);
      x$.lineTo(this.offset.x + this.vector.x * this.size, this.offset.y + this.vector.y * this.size);
      x$.lineTo(this.offset.x + this.vector.x * this.size * 0.66 + (this.dir >= 0
        ? 1
        : -1) * this.up.x * this.size * 0.25, this.offset.y + this.vector.y * this.size * 0.66 + (this.dir >= 0
        ? 1
        : -1) * this.up.y * this.size * 0.25);
      x$.stroke();
      x$.fill();
      x$.font = (this.size * 2 / 3 + "px sans-serif") + (bold ? ' bold' : '');
      x$.textAlign = 'center';
      x$.textBaseline = 'middle';
      x$.fillText(this.index, this.offset.x + this.vector.x * this.size * 0.33 + (this.dir >= 0
        ? 1
        : -1) * this.up.x * this.size * 0.33, this.offset.y + this.vector.y * this.size * 0.33 + (this.dir >= 0
        ? 1
        : -1) * this.up.y * this.size * 0.33);
    };
    prototype.doRender = function(ctx){
      this.drawArrow(ctx, '#fff', 32, true);
      this.drawArrow(ctx);
    };
    return Arrow;
  }(Comp));
  hintDataFromMOE = function(data){
    var vectors, res$, i$, to$, i, c, n, x, y, length, max, track, len$, v;
    res$ = [];
    for (i$ = 1, to$ = data.track.length; i$ < to$; ++i$) {
      i = i$;
      c = data.track[i - 1];
      n = data.track[i];
      x = n.x - c.x;
      y = n.y - c.y;
      length = Math.sqrt(x * x + y * y);
      res$.push({
        x: x,
        y: y,
        length: length
      });
    }
    vectors = res$;
    max = vectors.reduce(function(c, n){
      if (c.length > n.length) {
        return c;
      } else {
        return n;
      }
    });
    for (i$ = 0, len$ = vectors.length; i$ < len$; ++i$) {
      v = vectors[i$];
      if (v.length > max.length / 2.5) {
        track = v;
        break;
      }
    }
    return {
      x: data.track[0].x,
      y: data.track[0].y,
      track: track,
      guideline: vectors[0]
    };
  };
  hintDataFromScanline = function(data){
    return {
      x: 0,
      y: 0,
      track: {
        x: 0,
        y: 0,
        length: 0
      },
      guideline: {
        x: 0,
        y: 0,
        length: 0
      }
    };
  };
  halfPi = Math.PI / 2;
  Hint = (function(superclass){
    var prototype = extend$((import$(Hint, superclass).displayName = 'Hint', Hint), superclass).prototype, constructor = Hint;
    function Hint(data){
      var track;
      track = data.track;
      this.offset = {
        x: 0,
        y: 0
      };
      this.text = '';
      this.dir = 1;
      this.size = 160;
      this.computeVectors(track);
      Hint.superclass.call(this);
      import$(this, data);
    }
    prototype.computeVectors = function(track){
      var rad;
      this.front = {
        x: track.x / track.length,
        y: track.y / track.length
      };
      rad = Math.atan2(this.front.y, this.front.x);
      rad = halfPi > rad && rad >= -halfPi
        ? rad - halfPi
        : rad + halfPi;
      this.up = {
        x: Math.cos(rad),
        y: Math.sin(rad)
      };
      return {
        front: this.front,
        up: this.up
      };
    };
    prototype.computeLength = function(){
      return this.length = 0;
    };
    prototype.computeAABB = function(){
      this.aabb = new AABB;
      this.aabb.addPoint({
        x: this.offset.x,
        y: this.offset.y
      });
      this.aabb.addPoint({
        x: this.offset.x + this.size * this.front.x,
        y: this.offset.y + this.size * this.front.y
      });
      this.aabb.addPoint({
        x: this.offset.x + this.front.x * this.size * 0.5 + this.up.x * this.size * 0.5,
        y: this.offset.y + this.front.y * this.size * 0.5 + this.up.y * this.size * 0.5
      });
      return this.aabb;
    };
    prototype.computeOffset = function(it){
      var p, percent, x$;
      it = +it;
      if (it < 0) {
        it = 0;
      } else if (it < 1) {
        this.dir = 1;
      } else {
        this.dir = -~~(it - 1) - 1;
      }
      p = Math.abs(it);
      percent = p - ~~p;
      x$ = this.offset;
      x$.x = this.dir * this.guideline.length * this.up.x / 2 + percent * this.size * this.front.x;
      x$.y = this.dir * this.guideline.length * this.up.y / 2 + percent * this.size * this.front.y;
      return this.computeAABB();
    };
    prototype.drawArrow = function(ctx, color, width, bold){
      var x$;
      color == null && (color = '#c00');
      width == null && (width = 16);
      bold == null && (bold = false);
      x$ = ctx;
      x$.lineCap = 'round';
      x$.strokeStyle = color;
      x$.lineWidth = width;
      x$.beginPath();
      x$.moveTo(this.offset.x, this.offset.y);
      x$.lineTo(this.offset.x + this.front.x * this.size * 0.66, this.offset.y + this.front.y * this.size * 0.66);
      x$.stroke();
      x$.fillStyle = color;
      x$.beginPath();
      x$.moveTo(this.offset.x + this.front.x * this.size * 0.66, this.offset.y + this.front.y * this.size * 0.66);
      x$.lineTo(this.offset.x + this.front.x * this.size, this.offset.y + this.front.y * this.size);
      x$.lineTo(this.offset.x + this.front.x * this.size * 0.66 + (this.dir >= 0
        ? 1
        : -1) * this.up.x * this.size * 0.25, this.offset.y + this.front.y * this.size * 0.66 + (this.dir >= 0
        ? 1
        : -1) * this.up.y * this.size * 0.25);
      x$.stroke();
      x$.fill();
      x$.font = (this.size * 2 / 3 + "px sans-serif") + (bold ? ' bold' : '');
      x$.textAlign = 'center';
      x$.textBaseline = 'middle';
      x$.fillText(this.text, this.offset.x + this.front.x * this.size * 0.33 + (this.dir >= 0
        ? 1
        : -1) * this.up.x * this.size * 0.33, this.offset.y + this.front.y * this.size * 0.33 + (this.dir >= 0
        ? 1
        : -1) * this.up.y * this.size * 0.33);
    };
    prototype.doRender = function(ctx){
      this.drawArrow(ctx, '#fff', 32, true);
      this.drawArrow(ctx);
    };
    return Hint;
  }(Comp));
  ref$ = (ref1$ = window.zhStrokeData) != null
    ? ref1$
    : window.zhStrokeData = {};
  ref$.AABB = AABB;
  ref$.Comp = Comp;
  ref$.Empty = Empty;
  ref$.Track = Track;
  ref$.Stroke = Stroke;
  ref$.ScanlineTrack = ScanlineTrack;
  ref$.ScanlineStroke = ScanlineStroke;
  ref$.hintDataFromMOE = hintDataFromMOE;
  ref$.hintDataFromScanline = hintDataFromScanline;
  ref$.Hint = Hint;
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
